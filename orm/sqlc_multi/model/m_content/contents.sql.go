// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contents.sql

package m_content

import (
	"context"
	"database/sql"
)

const delete = `-- name: Delete :exec
DELETE FROM contents WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, delete, id)
	return err
}

const insert = `-- name: Insert :execresult
INSERT INTO contents (id, user_id, content)
    VALUES(?, ?, ?)
`

type InsertParams struct {
	ID      int64  `db:"id"`
	UserID  int64  `db:"user_id"`
	Content string `db:"content"`
}

func (q *Queries) Insert(ctx context.Context, db DBTX, arg InsertParams) (sql.Result, error) {
	return db.ExecContext(ctx, insert, arg.ID, arg.UserID, arg.Content)
}

const selectByID = `-- name: SelectByID :one
SELECT id, user_id, content, created_at, updated_at FROM contents WHERE id = ?
`

func (q *Queries) SelectByID(ctx context.Context, db DBTX, id int64) (Content, error) {
	row := db.QueryRowContext(ctx, selectByID, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectByUserID = `-- name: SelectByUserID :many
SELECT id, user_id, content, created_at, updated_at FROM contents WHERE user_id = ?
`

func (q *Queries) SelectByUserID(ctx context.Context, db DBTX, userID int64) ([]Content, error) {
	rows, err := db.QueryContext(ctx, selectByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Content{}
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :execresult
UPDATE contents SET content = ? WHERE id = ?
`

type UpdateParams struct {
	Content string `db:"content"`
	ID      int64  `db:"id"`
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg UpdateParams) (sql.Result, error) {
	return db.ExecContext(ctx, update, arg.Content, arg.ID)
}
