// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package m_user

import (
	"context"
	"database/sql"
)

const delete = `-- name: Delete :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, delete, id)
	return err
}

const insert = `-- name: Insert :execresult
INSERT INTO users (` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `nickname` + "`" + `)
    VALUES(?, ?, ?)
`

type InsertParams struct {
	ID       int64          `db:"id"`
	Name     string         `db:"name"`
	Nickname sql.NullString `db:"nickname"`
}

func (q *Queries) Insert(ctx context.Context, db DBTX, arg InsertParams) (sql.Result, error) {
	return db.ExecContext(ctx, insert, arg.ID, arg.Name, arg.Nickname)
}

const selectByID = `-- name: SelectByID :one
SELECT id, name, nickname, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) SelectByID(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRowContext(ctx, selectByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :execresult
UPDATE users SET ` + "`" + `name` + "`" + ` = ?, ` + "`" + `nickname` + "`" + ` = ?  WHERE id = ?
`

type UpdateParams struct {
	Name     string         `db:"name"`
	Nickname sql.NullString `db:"nickname"`
	ID       int64          `db:"id"`
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg UpdateParams) (sql.Result, error) {
	return db.ExecContext(ctx, update, arg.Name, arg.Nickname, arg.ID)
}
