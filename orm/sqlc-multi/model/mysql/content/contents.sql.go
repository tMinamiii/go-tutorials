// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contents.sql

package sqlc_multi_content

import (
	"context"
	"database/sql"
)

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM contents WHERE id = ?
`

func (q *Queries) DeleteContent(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteContent, id)
	return err
}

const insertContent = `-- name: InsertContent :execresult
INSERT INTO contents (id, user_id, content)
    VALUES(?, ?, ?)
`

type InsertContentParams struct {
	ID      int64  `db:"id"`
	UserID  int64  `db:"user_id"`
	Content string `db:"content"`
}

func (q *Queries) InsertContent(ctx context.Context, db DBTX, arg InsertContentParams) (sql.Result, error) {
	return db.ExecContext(ctx, insertContent, arg.ID, arg.UserID, arg.Content)
}

const selectContentByID = `-- name: SelectContentByID :one
SELECT id, user_id, content, created_at, updated_at FROM contents WHERE id = ?
`

func (q *Queries) SelectContentByID(ctx context.Context, db DBTX, id int64) (Content, error) {
	row := db.QueryRowContext(ctx, selectContentByID, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateContent = `-- name: UpdateContent :execresult
UPDATE contents SET content = ? WHERE id = ?
`

type UpdateContentParams struct {
	Content string `db:"content"`
	ID      int64  `db:"id"`
}

func (q *Queries) UpdateContent(ctx context.Context, db DBTX, arg UpdateContentParams) (sql.Result, error) {
	return db.ExecContext(ctx, updateContent, arg.Content, arg.ID)
}
